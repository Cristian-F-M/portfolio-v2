---
import type { Project } from "@/constants/Projects";
import { ui, type languages } from "@/i18n/ui";
import { useTranslations, getValueByPath } from "@/i18n/utils";
import { getRelativeLocaleUrl } from "astro:i18n";
import LanguageBadge from "@/components/LanguageBadge.astro";
import Github from "@/icons/Github.svg";
import SquareArrow from "@/icons/SquareArrow.svg";
import { twMerge as tw } from "tailwind-merge";

interface Props {
  project: Project;
  class?: string;
}

const { project, class: className } = Astro.props;

const lang = Astro.params.lang as keyof typeof languages;
const t = useTranslations(lang);
---

<a
  class={tw("flex w-64", className)}
  href={getRelativeLocaleUrl(lang, `projects/${project.id}`)}
  id={project.id}
  title={`${t((lang) => lang.projects.cardProjectTitle)} ${getValueByPath(ui[lang], project.name)}`}
>
  <div
    class="card transition-all size-full duration-200 ease-out group relative overflow-hidden cursor-cell perspective-distant rotate-x-(--rotate-x) rotate-y-(--rotate-y) scale-[scale3d(1,_1,_1)] bg-white/70 backdrop-blur-2xl dark:bg-slate-800/70 border-0 shadow-lg hover:shadow-gray-600/50 dark:hover:shadow-blue-400/10 rounded-md ring-2 ring-blue-500/20 dark:ring-blue-400/20"
    style="--rotate-x: 0; --rotate-y: 0;"
  >
    {/* Shine effect */}
    <div
      class={`shine-effect absolute pointer-events-none inset-0 bg-gradient-to-r from-transparent via-white/60 to-transparent group-hover:to-white/10 transform -skew-x-12 transition-transform duration-900 -translate-x-full z-500 opacity-0`}
    >
    </div>

    <div class="flex flex-col space-y-1.5 p-0">
      <div class="relative overflow-hidden">
        <img
          alt={getValueByPath(ui[lang], project.mainImage.alt)}
          loading="lazy"
          decoding="async"
          data-nimg="1"
          class="w-full h-52 object-cover"
          src={project.mainImage.path}
          transition:name={`main-image-${project.id}`}
        />
        <div
          class="absolute inset-0 bg-gradient-to-t from-black/50 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-all duration-300"
        >
        </div>
        {
          project.github && (
            <div class="absolute top-4 right-4 z-10 size-8">
              <button
                type="button"
                data-url={project.github}
                title={`Haz clic para ver el repositiorio de github de el proyecto ${getValueByPath(ui[lang], project.name)}`}
                class="flex items-center justify-center cursor-pointer border rounded-md size-full p-1 bg-white/95 dark:bg-slate-800/95 backdrop-blur-sm border-slate-200/90 shadow shadow-slate-400/60 dark:border-slate-700/50 hover:bg-slate-900 hover:text-white dark:hover:bg-slate-100 dark:hover:text-slate-900 transition-all duration-300 hover:scale-105 [&_svg]:pointer-events-none"
              >
                <Github class="size-full" />
              </button>
            </div>
          )
        }
        <div
          class="view-demo-button group-hover:flex hidden absolute bottom-0 right-0 items-center m-2 mt-0 z-100"
        >
          {
            !project.isAppMobile && project.isActive && (
              <button
                title={`${t((lang) => lang.projects.seeProjectDemoText)} ${getValueByPath(ui[lang], project.name)}`}
                data-url={project.url}
                class="inline-flex items-center w-fit cursor-pointer justify-center gap-2 whitespace-nowrap text-xs font-medium ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary hover:bg-primary/90 h-9 rounded-md px-3 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 hover:-rotate-3"
              >
                <SquareArrow />
                {t((lang) => lang.projects.seeDemoText)}
              </button>
            )
          }
        </div>
      </div>
    </div>

    <div class="p-6">
      <div class="flex items-center justify-between mb-3">
        <h3
          class="tracking-tight text-xl font-bold text-slate-900 dark:text-slate-100 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors line-clamp-1"
        >
          {getValueByPath(ui[lang], project.name)}
        </h3>
      </div>
      <p class="text-sm text-slate-600 dark:text-slate-400 mb-6 line-clamp-4">
        {getValueByPath(ui[lang], project.description)}
      </p>
      <div class="flex flex-row gap-1.5 mb-6">
        {
          project.skills.map((skill) => (
            <LanguageBadge
              id={`${project.id}-${skill.id}`}
              text={skill.text}
              icon={skill.icon}
            />
          ))
        }
      </div>
    </div>
  </div>
</a>

<script is:inline define:vars={{ project }}>
  const cardWrapper = document.querySelector(`#${project.id}`);
  const card = cardWrapper.querySelector(".card");
  const viewDemoButton = card.querySelector(".view-demo-button");

  if (card) {
    card.addEventListener("mouseenter", (e) => {
      viewDemoButton?.classList.add("show");
    });
    card.addEventListener("mouseleave", (e) => {
      viewDemoButton?.classList.remove("show");
    });

    card.addEventListener("mousemove", (e) => {
      const { width, height, left, top } = card.getBoundingClientRect();
      const x = (e.clientX - left) / width;
      const y = (e.clientY - top) / height;

      const xRotation = Math.floor((y - 0.5) * 20);
      const yRotation = Math.floor((x - 0.5) * -20);

      card.style.setProperty("--rotate-x", `${xRotation}deg`);
      card.style.setProperty("--rotate-y", `${yRotation}deg`);
    });

    card.addEventListener("mouseleave", () => {
      card.style.setProperty("--rotate-x", "0deg");
      card.style.setProperty("--rotate-y", "0deg");
    });
  }
</script>

<script>
  const buttons = document.querySelectorAll(".card button");

  buttons.forEach((b) => {
    b.addEventListener("click", (e) => {
      e.stopPropagation();
      e.preventDefault();
      const target = e.target as HTMLButtonElement;
      const { url, target: urlTarget } = target.dataset;
      window.open(url, urlTarget ?? "_blank");
    });
  });
</script>

<style>
  .view-demo-button.show {
    transform: translateY(0);
    opacity: 1;

    @starting-style {
      transform: translateY(10px);
      opacity: 0;
    }
  }

  .view-demo-button {
    transition: all 0.2s ease allow-discrete;
    transform: translateY(10px);
    opacity: 0;
  }
</style>
