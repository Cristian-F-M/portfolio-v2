---
import Section from "@/components/Section.astro";
import Code from "@/icons/Code.svg";
import IA from "@/icons/IA.svg";
import ProjectCard from "@/components/ProjectCard.astro";
import { useTranslations } from "@/i18n/utils";
import { getRelativeLocaleUrl } from "astro:i18n";
import { PROJECTS } from "@/constants/Projects";
import type { languages } from "@/i18n/ui";

const lang = Astro.params.lang as keyof typeof languages;
const t = useTranslations(lang);
---

<Section title={t((lang) => lang.projects.sectionTitle)} id="projects">
  <Code class="size-8 -m-2" slot={"icon"} />
  <div class="mt-6 flex gap-4 flex-wrap">
    {
      PROJECTS.filter((p) => p.isAppMobile || p.isActive)
        .slice(0, 6)
        .map((project, index) => {
          return <ProjectCard project={project} index={index} />;
        })
    }
  </div>

  <div class="text-center mt-10">
    <button
      data-url={getRelativeLocaleUrl(lang, "projects")}
      data-target="_self"
      class="inline-flex items-center justify-center gap-1 whitespace-nowrap [&_svg]:pointer-events-none [&_svg]:size-4 h-11 bg-gradient-to-r from-blue-700  to-emerald-800 text-white px-7 py-4 rounded-lg transition-all duration-300 hover:shadow-2xl hover:scale-105 text-md cursor-pointer active:from-blue-600 active:to-emerald-700"
      onclick="event.preventDefault();  window.open(this.dataset.url, this.dataset.target ?? '_blank');"
    >
      <IA />
      {t((lang) => lang.projects.seeMoreProjects)}
    </button>
  </div>
</Section>

<script>
  const cards = document.querySelectorAll(
    ".card",
  ) as NodeListOf<HTMLDivElement>;

  const cantCards = cards.length;
  /** in Seconds */
  const animationDuration = 1.5;
  const maxSpeed = 2000;
  const minSpeed = 2000;
  const intervalTime = Math.max(maxSpeed, minSpeed / cantCards);
  let animateInterval: null | NodeJS.Timeout = null;

  function animateRandomShine() {
    if (cards.length <= 0) return;

    const index = Math.floor(Math.random() * cards.length);
    const randomCard = cards[index];
    const shineEffect = randomCard.querySelector(
      ".shine-effect",
    ) as HTMLDivElement;

    if (!shineEffect) return;

    shineEffect.style.animationDuration = `${animationDuration}s`;
    shineEffect.classList.add("animate-shine-effect");

    shineEffect.addEventListener("animationend", (event) => {
      shineEffect.classList.remove("animate-shine-effect");
    });
  }

  window.addEventListener("blur", function () {
    if (animateInterval) clearTimeout(animateInterval);
  });

  window.addEventListener("focus", function () {
    startAnimation();
  });

  function startAnimation() {
    const hexagons = document.querySelectorAll(".hexagon");
    const cantCards = hexagons.length;
    const intervalTime = Math.max(maxSpeed, minSpeed / cantCards);

    animateRandomShine();
    animateInterval = setInterval(animateRandomShine, intervalTime);
  }

  const callback: IntersectionObserverCallback = function (entries, observer) {
    entries.forEach((entrie) => {
      const { isIntersecting } = entrie;

      if (isIntersecting) startAnimation();
      if (!isIntersecting && animateInterval) clearTimeout(animateInterval);
    });
  };

  const observer = new IntersectionObserver(callback, {
    root: null,
    rootMargin: "60px",
    threshold: 0,
  });

  const projectsSection = document.querySelector("#projects");

  if (projectsSection) observer.observe(projectsSection);
</script>
